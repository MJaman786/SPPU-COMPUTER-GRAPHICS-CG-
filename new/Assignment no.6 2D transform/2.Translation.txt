#include <GL/glut.h>
#include <iostream>

using namespace std;

const int NUM_VERTICES = 3; // Number of vertices in the triangle
const int NUM_DIMENSIONS = 2; // Number of dimensions (x, y)

int tx, ty;

int triangle[3][2] = {
    {200, 100}, // Vertex 1 (x, y)
    {600, 100}, // Vertex 2 (x, y)
    {355, 400}  // Vertex 3 (x, y)
};

void translate()
{
    for (int i = 0; i < NUM_VERTICES; i++) {
        triangle[i][0] += tx; // Translate x-coordinate
        triangle[i][1] += ty; // Translate y-coordinate
    }
}

void init()
{
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(1080, 720);
    glutInitWindowPosition(200, 100);
}

void project()
{
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, 1080, 0, 720);
}

void draw_triangle()
{
    glColor3f(1.0, 1.0, 1.0); // Set line color to white
    glBegin(GL_LINE_LOOP);
        glVertex2f(triangle[0][0], triangle[0][1]);
        glVertex2f(triangle[1][0], triangle[1][1]);
        glVertex2f(triangle[2][0], triangle[2][1]);
    glEnd();
}

void display()
{
    glClearColor(0.0, 0.0, 0.0, 0.0);
    glClear(GL_COLOR_BUFFER_BIT);

    draw_triangle();

    translate();

    glColor3f(1.0, 0.0, 0.0); // Set line color to red
    glBegin(GL_LINE_LOOP);
    	glVertex2f(triangle[0][0], triangle[0][1]);
    	glVertex2f(triangle[1][0], triangle[1][1]);
        glVertex2f(triangle[2][0], triangle[2][1]);
    glEnd();

    glFlush();
}

int main(int argc, char** argv)
{
    cout << "Enter tx = ";
    cin >> tx;

    cout << "Enter ty = ";
    cin >> ty;

    glutInit(&argc, argv);
    init();
    glutCreateWindow("Translation");
    glutDisplayFunc(display);
    project();
    glutMainLoop();
    return 0;
}
