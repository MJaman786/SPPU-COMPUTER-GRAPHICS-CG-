/*
	Basic Algo :
	
	dx = x2-x1;
	dy = y2-y1;
	
	if, dx > dy then steps = dx
	
	else, steps = dy
	
	and then:
	
	1.first initalize starting co-ordinates(x1,y1);
	
		i.e float x = x1;
			float y = y1;
			
	2.use for Loop for iteration and ploating points  
	increments the value from starting points to end points
	
	float x += x_increments
	float y += y_increments
	
*/

#include<iostream>
#include<GL/glut.h>

using namespace std;

void init(void){								//window orientation 

	glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);
	glutInitWindowSize(800,800);
	glutInitWindowPosition(500,100);
}
						
float start_x,start_y;	//initalize variables
float end_x,end_y;		// start_x = x1 , start_y = y1
float steps;			// end_x = x2 , end_y = y2

void DDA(){

	float dx = end_x-start_x;
	float dy = end_y-start_y;
	
	if(abs(dx)>abs(dy)){
	
		steps = abs(dx);
	
	}
	else{
	
		steps = abs(dy);
	
	}
	 
	float x_increment = dx/steps;  
	float y_increment = dy/steps;
	
	//initalize starting point of line
	
	float x = start_x;
	float y = start_y;
	
	
	//plot points
		glBegin(GL_POINTS);
	
	for(int i=0; i<steps; i++){
	
		glVertex2f(x,y);
	
		x += x_increment;
		y += y_increment;
	
	}
	
		glEnd(); //end commands
		
		glFlush(); //flush all the commands

}

void display(void){

	glClearColor(1.0,1.0,1.0,0.0);
	glClear(GL_COLOR_BUFFER_BIT);
	glLineWidth(2);
	glPointSize(2);
	glColor3f(0.0,0.0,0.0);
	DDA();

}

int main(int argc,char** argv){

	cout<<"Enter x1 = ";
	cin>>start_x;
	cout<<endl;
	cout<<"Enter y1 = ";
	cin>>start_y;
	cout<<endl;
	cout<<"Enter x2 = ";
	cin>>end_x;
	cout<<endl;
	cout<<"Enter y2 = ";
	cin>>end_y;
	cout<<endl;
	

	glutInit(&argc,argv);	
	init();
	glutCreateWindow("DDA LINE");
	glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, 800, 0, 800);
	glutDisplayFunc(display);
	glutMainLoop();
	
	return 0;

}